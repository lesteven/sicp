(define (<name> <formal parameters>)
  <body>)

(cond (<p1> <e1>)
      (<p2> <e2>)
      ...
      (<pn> <en>))
- each (<p> <e>) are called clauses
  - first expression is called predicated, evalutes to true or false
    - if p1 false, then p2 evaluated, if p2 false, then p3.
    - once true, consequent expression <e> is evaluated

(if <predicate> <consequent> <alternative>)
- if true, evaluate consequent, else alternative.

(and <e1> ... <en>)
- if any false, then evaluates to false, rest not evaluated
- if all true, expression is value of last one

(or <e1> ... <en>)
- check until value found to be true, then rest not evaluated.
- if all false, expression set to false

(not <e>)
- true when exp. evaluates to false, and vice versa

Block structure
- define subroutines within function to hide implementation
  details

(lambda (<formal-parameter>) <body>)
- create procedures without naming it (anonymous function)

(let ((<var1> <exp1>)
      (<var2> <exp2>)
      ...
      (<varn> <expn>))
  <body>)

let var1 have value exp1, 
    var2 have value exp2,
    ... varn have value expn
in body

let
- when defining variables, it uses global definition
- inside body, it uses local definition (even when global is available)
  - if global available, and local not defined, global will be used

cons (construct)
- creates compound structure called pair
car (Contents of Address part of Register)
- first item in cons
cdr (Contents of Decrement part of Register)
- second item in cons

list-structured data
- data objects constructed from pairs


